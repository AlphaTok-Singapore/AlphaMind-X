# AlphaMind-Dify docker-compose file
# Environment variables are loaded from .env file in the same directory

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./docker/db/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dify -d dify"]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 60s

  # Redis Cache
  redis:
    image: redis:7-alpine
    restart: always
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Weaviate Vector Database
  weaviate:
    image: semitechnologies/weaviate:1.19.0
    restart: always
    environment:
      QUERY_DEFAULTS_LIMIT: 25
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      DEFAULT_VECTORIZER_MODULE: 'none'
      CLUSTER_HOSTNAME: 'node1'
      AUTHENTICATION_APIKEY_ENABLED: 'true'
      AUTHENTICATION_APIKEY_ALLOWED_KEYS: WVF5YThaHlkYwhGUSmCRgsX3tD5ngdN8pkih
      AUTHENTICATION_APIKEY_USERS: hello@dify.ai
      AUTHORIZATION_ADMINLIST_ENABLED: 'true'
      AUTHORIZATION_ADMINLIST_USERS: hello@dify.ai
    volumes:
      - weaviate_data:/var/lib/weaviate
    ports:
      - "8080:8080"

  # Dify API Service
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    image: my-dify-api:main
    restart: always
    environment:
      MODE: api
      LOG_LEVEL: INFO
      SECRET_KEY: ${SECRET_KEY}
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
      WEB_API_CORS_ALLOW_ORIGINS: 'http://localhost:3000,http://127.0.0.1:3000,http://localhost:3100,http://127.0.0.1:3100,*'
      CONSOLE_CORS_ALLOW_ORIGINS: 'http://localhost:3000,http://127.0.0.1:3000,http://localhost:3100,http://127.0.0.1:3100,*'
      CONSOLE_WEB_URL: ''
      INIT_PASSWORD: ''
      CONSOLE_API_URL: ''
      SERVICE_API_URL: ''
      APP_WEB_URL: ''
      FILES_URL: ''
      MIGRATION_ENABLED: 'true'
      VECTOR_STORE: ${VECTOR_STORE}
      WEAVIATE_ENDPOINT: http://weaviate:8080
      WEAVIATE_API_KEY: WVF5YThaHlkYwhGUSmCRgsX3tD5ngdN8pkih
      OPENDAL_FS_ROOT: /app/storage
      EMAIL_ENABLE: true
      ENABLE_EMAIL_PASSWORD_LOGIN: 'true'
      ENABLE_EMAIL_CODE_LOGIN: 'true'

      # Plugin Daemon Configuration
      PLUGIN_DAEMON_URL: http://plugin_daemon:5002
      PLUGIN_DAEMON_KEY: lYkiYYT6owG+71oLerGzA7GXCgOT++6ovaezWAjpCjf+Sjc3ZtU+qUEi
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - app_storage:/app/storage
    ports:
      - "5001:5001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:5001/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Dify Worker Service
  worker:
    build:
      context: ./api
      dockerfile: Dockerfile
    restart: always
    environment:
      MODE: worker
      LOG_LEVEL: INFO
      SECRET_KEY: ${SECRET_KEY}
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
      VECTOR_STORE: ${VECTOR_STORE}
      WEAVIATE_ENDPOINT: http://weaviate:8080
      WEAVIATE_API_KEY: WVF5YThaHlkYwhGUSmCRgsX3tD5ngdN8pkih
      OPENDAL_FS_ROOT: /app/storage
      EMAIL_ENABLE: true
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - app_storage:/app/storage

  # Dify Web Frontend
  web:
    build:
      context: ./web
      dockerfile: Dockerfile
    restart: always
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:3000
      NEXT_PUBLIC_DIFY_API_URL: http://localhost:3000
      NEXT_PUBLIC_API_PREFIX: http://localhost:3000/console/api
      NEXT_PUBLIC_PUBLIC_API_PREFIX: http://localhost:3000/api
      NEXT_PUBLIC_MARKETPLACE_API_PREFIX: https://marketplace.dify.ai/api/v1
      NEXT_PUBLIC_MARKETPLACE_URL_PREFIX: https://marketplace.dify.ai
      NEXT_PUBLIC_N8N_URL: http://n8n:5678
      NEXT_PUBLIC_DEPLOY_ENV: DEVELOPMENT
      NEXT_PUBLIC_EDITION: SELF_HOSTED
      NEXT_TELEMETRY_DISABLED: 1
      # 增加Node.js内存限制 - 为64GB内存机器优化
      NODE_OPTIONS: "--max-old-space-size=8192"
    depends_on:
      api:
        condition: service_healthy
    ports:
      - "3000:3000"
    command: ["pnpm", "run", "dev", "-H", "0.0.0.0"]
    # 增加内存限制 - 为64GB内存机器优化
    deploy:
      resources:
        limits:
          memory: 12G
          cpus: '4.0'
        reservations:
          memory: 6G
          cpus: '2.0'
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://127.0.0.1:3000"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # AlphaMind API Service
  alphamind-api:
    build:
      context: ./docker/alphamind-api
      dockerfile: Dockerfile
    restart: always
    environment:
      ALPHAMIND_JWT_SECRET_KEY: ${SECRET_KEY}
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/2
      DIFY_API_URL: http://api:5001
      N8N_API_URL: http://n8n:5678
      JWT_SECRET_KEY: ${SECRET_KEY}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      api:
        condition: service_healthy
    ports:
      - "5100:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    entrypoint: ["/app/entrypoint.sh"]

  # AlphaMind Web Frontend
  alphamind-web:
    build:
      context: ./docker/alphamind-web
      dockerfile: Dockerfile
    restart: always
    environment:
      NEXT_PUBLIC_JWT_SECRET_KEY: ${SECRET_KEY}
      NEXT_PUBLIC_API_URL: http://alphamind-api:8000
      NEXT_PUBLIC_DIFY_API_URL: http://api:5001
    depends_on:
      alphamind-api:
        condition: service_healthy
    ports:
      - "3100:3000"
    command: ["pnpm", "run", "dev", "-H", "0.0.0.0"]
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://127.0.0.1:3000"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # n8n Workflow Engine (Compatible with existing data)
  n8n:
    image: n8nio/n8n:latest  # Using latest version
    container_name: n8n
    restart: always
    ports:
      - "5678:5678"
    environment:
      # Timezone setting
      - GENERIC_TIMEZONE=Asia/Shanghai

      # Host and port configuration
      - N8N_HOST=0.0.0.0
      - N8N_PORT=5678
      - N8N_PROTOCOL=http

      # Webhook configuration
      - WEBHOOK_URL=http://n8n:5678
      - N8N_EDITOR_BASE_URL=http://n8n:5678

      # Debug log level
      # - N8N_LOG_LEVEL=debug

      # Database configuration (optional, if PostgreSQL is needed)
      # - DB_TYPE=postgresdb
      # - DB_POSTGRESDB_HOST=db
      # - DB_POSTGRESDB_PORT=5432
      # - DB_POSTGRESDB_DATABASE=n8n
      # - DB_POSTGRESDB_USER=dify
      # - DB_POSTGRESDB_PASSWORD=dify123456

      # Basic authentication (optional)
      # - N8N_BASIC_AUTH_ACTIVE=true
      # - N8N_BASIC_AUTH_USER=admin
      # - N8N_BASIC_AUTH_PASSWORD=admin123456
    volumes:
      # Use external volume to protect existing data
      - n8n_data:/home/node/.n8n

      # Local file mapping (adjust as needed)
      # Windows example: - D:/n8n-local-files:/tmp/
      # Linux/Mac example: - ./n8n-local-files:/tmp/
      # - ./n8n-local-files:/tmp/
    depends_on:
      db:
        condition: service_healthy
    networks:
      - n8n_network

  # Plugin Daemon Service (plugin management daemon)
  plugin_daemon:
    image: langgenius/dify-plugin-daemon:0.1.2-local
    restart: always
    environment:
      # Database configuration
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_USERNAME: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_DATABASE: dify_plugin

      # Redis configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_DB: 3

      # Service configuration
      SERVER_PORT: 5002
      SERVER_KEY: lYkiYYT6owG+71oLerGzA7GXCgOT++6ovaezWAjpCjf+Sjc3ZtU+qUEi

      # Dify API connection configuration
      DIFY_INNER_API_URL: http://api:5001
      DIFY_INNER_API_KEY: QaHbTe77CtuXmsfyhR7+vRjI/+XbV1AaFy691iy+kGDv2Jvy0/eAh8Y1

      # Plugin configuration
      MAX_PLUGIN_PACKAGE_SIZE: 52428800
      PLUGIN_REMOTE_INSTALLING_HOST: 0.0.0.0
      PLUGIN_REMOTE_INSTALLING_PORT: 5003
      PLUGIN_WORKING_PATH: /app/storage/cwd
      FORCE_VERIFYING_SIGNATURE: true
      PYTHON_ENV_INIT_TIMEOUT: 120
      PLUGIN_MAX_EXECUTION_TIMEOUT: 600
      PLUGIN_STORAGE_TYPE: local
      PLUGIN_STORAGE_LOCAL_ROOT: /app/storage
      PLUGIN_INSTALLED_PATH: plugin
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      api:
        condition: service_healthy
    volumes:
      - plugin_storage:/app/storage
      - ./docker/wait-for-it.sh:/wait-for-it.sh
    ports:
      - "5002:5002"
    # command: ["/wait-for-it.sh", "db:5432", "--timeout=60", "--", "/app/cmd/server/main"]

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    restart: always
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      web:
        condition: service_healthy
      alphamind-web:
        condition: service_healthy
      n8n:
        condition: service_started
    ports:
      - "80:80"
    networks:
      - n8n_network
      - default

  puppeteer:
    build:
      context: ./docker/puppeteer_scraper/puppeteer_scraper
    container_name: puppeteer
    ports:
      - "3020:3001"
    networks:
      - n8n_network

  # Watchtower for automatic updates
  watchtower:
    image: containrrr/watchtower
    container_name: watchtower-alphamind
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_REMOVE_VOLUMES=true
      - WATCHTOWER_INCLUDE_STOPPED=true
      - WATCHTOWER_SCHEDULE=0 0 2 * * *
    command: n8n

volumes:
  # Newly created volumes
  db_data:
  redis_data:
  weaviate_data:
  app_storage:
  plugin_storage:

  # n8n data - using external volume to protect existing data
  n8n_data:
    external: true  # Marked as external volume to protect existing data

networks:
  n8n_network:
    # external: true  # 注释掉或删除
