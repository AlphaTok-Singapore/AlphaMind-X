{
  "name": "AI_social_post_generator",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "webpage-social",
        "responseMode": "responseNode",
        "options": {}
      },
      "name": "1-Webhook Entry",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -2400,
        -208
      ],
      "webhookId": "webpage-social",
      "id": "3d63178f-2276-4960-ac5a-a67149780e20",
      "nodeNumber": 1
    },
    {
      "parameters": {
        "jsCode": "const manual = $json.body[\"Manual Content (if webpage blocked)\"] || '';\nconst url = $json.body[\"Webpage URL\"] || '';\nconst model = $json.body[\"Ollama Model\"];\nconst seoPrompt = $json.body[\"seoPrompt\"] || '';\nconst postPrompt = $json.body[\"postPrompt\"] || '';\nconst provider = $json.body[\"Provider\"] || 'Ollama';\nconst platforms = $json.body[\"Target Platforms\"] || [];\n\nreturn [{\n  json: {\n    html: manual.trim(),\n    url,\n    model,\n    provider,\n    seoPrompt,\n    postPrompt,\n    platforms,\n    hasManualContent: manual.trim().length > 0\n  }\n}];"
      },
      "name": "2-Prepare Content",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        -2208,
        -416
      ],
      "id": "11963833-cb68-49ed-931e-ddf733022393",
      "nodeNumber": 2
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.hasManualContent }}",
              "value2": "={{ false }}"
            }
          ]
        }
      },
      "name": "3-IF Manual Missing",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        -2176,
        -16
      ],
      "id": "6f139540-9aaa-4593-90ff-1896af41193e",
      "nodeNumber": 3
    },
    {
      "parameters": {
        "jsCode": "const url = $json.url;\nconst provider = $json.provider;\nconst model = $json.model;\n\nasync function fetchHtml(url) {\n  try {\n    const html = await this.helpers.httpRequest({\n      method: 'GET',\n      url,\n      headers: {\n        'User-Agent': 'Mozilla/5.0'\n      }\n    });\n    return html;\n  } catch (error) {\n    return '';\n  }\n}\n\nreturn (async () => {\n  const html = await fetchHtml(url);\n  return [{ json: { html, provider, model, url } }];\n})();"
      },
      "name": "4-Code Fetch & Check HTML",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        -1984,
        -352
      ],
      "id": "0e6a89dc-ae57-4947-982e-2a1b40123f22",
      "nodeNumber": 4
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.html }}",
              "operation": "isEmpty"
            }
          ]
        }
      },
      "name": "4c-IF HTML Missing",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        -1920,
        -96
      ],
      "id": "0d5f74ee-09c4-4c24-9290-143b04a05840",
      "nodeNumber": 4
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "http://puppeteer:3001/scrape",
        "responseFormat": "text",
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "{{JSON.stringify({url: $json.url})}}"
      },
      "name": "4b-Get HTML via Puppeteer",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 2,
      "position": [
        -1696,
        -240
      ],
      "id": "345ba703-6ac1-4326-ac18-b04b4d7b4226",
      "nodeNumber": 4
    },
    {
      "parameters": {
        "jsCode": "let html = $json.html || '';\nlet seoPromptTemplate = $node['2-Prepare Content'].json.seoPrompt || '';\n\n// 必须使用前端传入的提示词，不允许硬编码\nif (!seoPromptTemplate || seoPromptTemplate.trim() === '') {\n  return [{ json: { \n    error: 'No SEO prompt provided from frontend',\n    html,\n    debug: 'Frontend must provide seoPrompt parameter'\n  } }];\n}\n\nlet template = seoPromptTemplate;\nlet contentToUse = html.trim() || 'No available content';\n\nlet seoPrompt = template\n  .replace(/{content}/g, contentToUse)\n  .replace(/\\{\\{\\s*\\$json\\.html\\s*\\|\\|\\s*\\$json\\.body\\s*\\}\\}/g, contentToUse)\n  .replace(/\\{\\{\\$json\\.html\\s*\\|\\|\\s*\\$json\\.body\\}\\}/g, contentToUse)\n  .replace(/\\{\\{\\s*\\$json\\.html\\s*\\}\\}/g, contentToUse)\n  .replace(/\\{\\{\\$json\\.html\\}\\}/g, contentToUse)\n  .replace(/\\{\\{\\s*\\$json\\.body\\s*\\}\\}/g, contentToUse)\n  .replace(/\\{\\{\\$json\\.body\\}\\}/g, contentToUse);\n\nlet debugTemplate = template;\nlet debugContentLength = contentToUse.length;\nlet debugSeoPrompt = seoPrompt;\nlet debugHtml = contentToUse;\nlet debugJsonHtml = JSON.stringify($json);\nlet debugNodeData = JSON.stringify($node['2-Prepare Content'].json);\nlet debugTemplateUsed = 'frontend-provided';\nlet debugPlaceholdersFound = [];\nif (template.includes('{content}')) debugPlaceholdersFound.push('{content}');\nif (template.match(/\\{\\{\\s*\\$json\\.html\\s*\\|\\|\\s*\\$json\\.body\\s*\\}\\}/)) debugPlaceholdersFound.push('{{ $json.html || $json.body }}');\nif (template.match(/\\{\\{\\$json\\.html\\s*\\|\\|\\s*\\$json\\.body\\}\\}/)) debugPlaceholdersFound.push('{{$json.html||$json.body}}');\nif (template.match(/\\{\\{\\s*\\$json\\.html\\s*\\}\\}/)) debugPlaceholdersFound.push('{{ $json.html }}');\nif (template.match(/\\{\\{\\s*\\$json\\.body\\s*\\}\\}/)) debugPlaceholdersFound.push('{{ $json.body }}');\n\nreturn [{ json: {\n  html,\n  seoPrompt,\n  debugSeoPrompt,\n  debugHtml,\n  debugJsonHtml,\n  debugNodeData,\n  debugContentLength,\n  debugTemplate,\n  debugTemplateUsed,\n  debugPlaceholdersFound,\n  postPrompt: $node['2-Prepare Content'].json.postPrompt,\n  model: $node['2-Prepare Content'].json.model,\n  provider: $node['2-Prepare Content'].json.provider\n} }];"
      },
      "name": "5-Set Prompt (SEO)",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        -1584,
        -16
      ],
      "id": "341ebcbb-2651-4a81-872b-5e7c22b99c34",
      "nodeNumber": 5
    },
    {
      "parameters": {
        "mode": "expression",
        "output": "={{ $json.provider === 'Ollama' ? 0 : ($json.provider === 'OpenAI' ? 1 : ($json.provider === 'Deepseek' ? 2 : -1)) }}"
      },
      "name": "6-Provider Switch (SEO)",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 1,
      "position": [
        -1440,
        -176
      ],
      "id": "fcc12e21-f27c-41ac-b181-6cd129420c7d",
      "nodeNumber": 6
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "http://host.docker.internal:11434/api/generate",
        "jsonParameters": true,
        "options": {
          "timeout": 180000
        },
        "bodyParametersJson": "={{ JSON.stringify({ model: $json.model || 'qwen2.5vl:7b', prompt: $json.seoPrompt || 'Extract topic, keywords and hashtags from the content.', stream: false }) }}"
      },
      "name": "7-Ollama Extract",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 2,
      "position": [
        -1216,
        -496
      ],
      "id": "6087c806-8514-4fa4-b473-183708e65036",
      "nodeNumber": 7
    },
    {
      "parameters": {
        "functionCode": "let raw = $json.response || '';\nif (!raw || raw.trim() === '') {\n  return [{ json: { Topic: 'No content generated', Keywords: ['AI', 'automation'], Hashtags: ['#AI', '#automation'], model: $json.model || '', provider: 'Ollama', postPrompt: $json.postPrompt || $node[\"2-Prepare Content\"].json.postPrompt, debug: 'Empty response from Ollama', requestData: JSON.stringify($input) } }];\n}\n\nraw = raw.replace(/^```json\\s*\\n/, '').replace(/\\n\\s*```$/, '').replace(/^```\\s*\\n/, '').replace(/\\n\\s*```$/, '').trim();\n\nraw = raw.replace(/<think>[\\s\\S]*?<\\/think>/gi, '').trim();\n\nlet parsed = {};\ntry { \n  parsed = JSON.parse(raw); \n} catch (e) { \n  const topicMatch = raw.match(/\"Topic\"\\s*:\\s*\"([^\"]+)\"/i);\n  const keywordsMatch = raw.match(/\"Keywords\"\\s*:\\s*\\[([^\\]]+)\\]/i);\n  const hashtagsMatch = raw.match(/\"Hashtags\"\\s*:\\s*\\[([^\\]]+)\\]/i);\n  \n  parsed = { \n    Topic: topicMatch ? topicMatch[1] : 'Failed to parse: ' + raw.substring(0, 100), \n    Keywords: keywordsMatch ? keywordsMatch[1].split(',').map(k => k.trim().replace(/\"/g, '')) : ['parsing', 'error'], \n    Hashtags: hashtagsMatch ? hashtagsMatch[1].split(',').map(h => h.trim().replace(/\"/g, '')) : ['#error'],\n    debug: 'JSON parse failed: ' + e.message,\n    rawResponse: raw\n  }; \n}\n\nreturn [{ json: { ...parsed, model: $json.model || '', provider: 'Ollama', postPrompt: $json.postPrompt || $node[\"2-Prepare Content\"].json.postPrompt } }];"
      },
      "name": "7a-Parse Ollama JSON",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -1088,
        -496
      ],
      "id": "b7ec55bb-74df-4e99-b368-d3be227780d4",
      "nodeNumber": 71
    },
    {
      "parameters": {
        "functionCode": "return [{ json: { provider: 'OpenAI', Topic: 'topic from OpenAI', Keywords: ['AI','n8n'], Hashtags: ['#OpenAI'], prompt_used: $json.seo_prompt } }];"
      },
      "name": "8-OpenAI Extract",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -1200,
        -272
      ],
      "id": "ed7b8c91-6740-4877-8d10-429911c62e16",
      "nodeNumber": 8
    },
    {
      "parameters": {
        "functionCode": "let raw = $json.response || '';\nraw = raw.replace(/^```json\\n/, '').replace(/\\n```$/, '').replace(/<think>[\\s\\S]*?<\\/think>/gi, '').trim();\nlet parsed = {};\ntry { parsed = JSON.parse(raw); } catch (e) { parsed = { Topic: 'Failed to parse topic', Keywords: [], Hashtags: [] }; }\nreturn [{ json: { ...parsed, model: $json.model || '', provider: 'OpenAI', postPrompt: $json.postPrompt || $node[\"2-Prepare Content\"].json.postPrompt } }];"
      },
      "name": "8a-Parse OpenAI JSON",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -1088,
        -272
      ],
      "id": "a52960de-c8e8-4ff5-8176-2844f13012b1",
      "nodeNumber": 81
    },
    {
      "parameters": {
        "functionCode": "return [{ json: { provider: 'Deepseek', Topic: 'topic from Deepseek', Keywords: ['AI','n8n'], Hashtags: ['#Deepseek'], prompt_used: $json.seo_prompt } }];"
      },
      "name": "9-Deepseek Extract",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -1200,
        -80
      ],
      "id": "214ebb0c-ce83-44d0-8d7c-796c4cd7abed",
      "nodeNumber": 9
    },
    {
      "parameters": {
        "functionCode": "let raw = $json.response || '';\nraw = raw.replace(/^```json\\n/, '').replace(/\\n```$/, '').replace(/<think>[\\s\\S]*?<\\/think>/gi, '').trim();\nlet parsed = {};\ntry { parsed = JSON.parse(raw); } catch (e) { parsed = { Topic: 'Failed to parse topic', Keywords: [], Hashtags: [] }; }\nreturn [{ json: { ...parsed, model: $json.model || '', provider: 'Deepseek', postPrompt: $json.postPrompt || $node[\"2-Prepare Content\"].json.postPrompt } }];"
      },
      "name": "9a-Parse Deepseek JSON",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -1088,
        -80
      ],
      "id": "54bfd717-47d1-489d-9af7-f3a15aab0ca8",
      "nodeNumber": 91
    },
    {
      "parameters": {
        "functionCode": "const result = {\n  Topic: $json.Topic || 'General topic',\n  Keywords: $json.Keywords || ['AI', 'automation'],\n  Hashtags: $json.Hashtags || ['#AI', '#automation'],\n  provider: $json.provider || $node[\"2-Prepare Content\"].json.provider || 'Ollama',\n  model: $json.model || $node[\"2-Prepare Content\"].json.model || 'qwen2.5vl:7b',\n  postPrompt: $json.postPrompt || $node[\"2-Prepare Content\"].json.postPrompt || 'Please write a social media post based on the following topic and keywords. Requirements:\\n\\n1. Start with an engaging title or opening\\n2. Body in 2-3 paragraphs with blank lines between them\\n3. Content should have practical value and insights\\n4. End with an encouraging call for interaction\\n5. Add relevant hashtags on a separate line at the end\\n\\nTopic: {topic}\\nKeywords: {keywords}\\nSuggested hashtags: {hashtags}\\n\\nPlease output in the following social media post format (do not include labels like \\\"Title:\\\", \\\"Hook:\\\", \\\"CTA:\\\"):\\n\\n[Engaging opening/title]\\n\\n[First paragraph - Introduce the topic]\\n\\n[Second paragraph - Core point or value]\\n\\n[Third paragraph - Call for interaction]\\n\\n[hashtags]'\n};\nreturn [{ json: result }];\n"
      },
      "name": "10-Parse SEO JSON",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -864,
        -336
      ],
      "id": "fa204e68-3472-4522-ac16-9f14fc7b945a",
      "nodeNumber": 10
    },
    {
      "parameters": {
        "jsCode": "let topic = $json.Topic || 'Unknown topic';\nlet keywords = $json.Keywords || [];\nlet hashtags = $json.Hashtags || [];\nlet postPromptTemplate = $json.postPrompt || '';\n\n// 必须使用前端传入的提示词，不允许硬编码\nif (!postPromptTemplate || postPromptTemplate.trim() === '') {\n  return [{ json: { \n    error: 'No post prompt provided from frontend',\n    topic,\n    keywords,\n    hashtags,\n    debug: 'Frontend must provide postPrompt parameter'\n  } }];\n}\n\nlet template = postPromptTemplate;\n\nlet postPrompt = template\n  .replace(/{topic}/g, topic)\n  .replace(/{keywords}/g, keywords.join(', '))\n  .replace(/{hashtags}/g, hashtags.join(' '))\n  .replace(/\\{\\{\\s*\\$json\\.Topic\\s*\\}\\}/g, topic)\n  .replace(/\\{\\{\\s*\\(\\$json\\.Keywords\\s*\\|\\|\\s*\\[\\]\\)\\.join\\(.*?\\)\\s*\\}\\}/g, keywords.join(', '))\n  .replace(/\\{\\{\\s*\\(\\$json\\.Hashtags\\s*\\|\\|\\s*\\[\\]\\)\\.join\\(.*?\\)\\s*\\}\\}/g, hashtags.join(' '));\n\nlet debugPostTemplate = template;\nlet debugTopicUsed = topic;\nlet debugKeywordsUsed = keywords.join(', ');\nlet debugHashtagsUsed = hashtags.join(' ');\nlet debugPostPrompt = postPrompt;\nlet debugPostTemplateUsed = 'frontend-provided';\n\nreturn [{ json: {\n  ...$json,\n  postPrompt,\n  debugPostTemplate,\n  debugTopicUsed,\n  debugKeywordsUsed,\n  debugHashtagsUsed,\n  debugPostPrompt,\n  debugPostTemplateUsed\n} }];"
      },
      "name": "11-Set Post Prompt",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        -848,
        -96
      ],
      "id": "38275571-d867-47b5-b234-18dbac5b33ff",
      "nodeNumber": 11
    },
    {
      "parameters": {
        "mode": "expression",
        "output": "={{ $json.provider === 'Ollama' ? 0 : ($json.provider === 'OpenAI' ? 1 : ($json.provider === 'Deepseek' ? 2 : -1)) }}"
      },
      "name": "12-Provider Switch (Post)",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 1,
      "position": [
        -656,
        -112
      ],
      "id": "4d593730-03f0-4d87-a07c-42fe94033224",
      "nodeNumber": 12
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "http://host.docker.internal:11434/api/generate",
        "jsonParameters": true,
        "options": {
          "timeout": 180000
        },
        "bodyParametersJson": "={{ JSON.stringify({ model: $json.model || 'qwen2.5vl:7b', prompt: $json.postPrompt || 'Generate a social media post.', stream: false }) }}"
      },
      "name": "13-Ollama Generate Post",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 2,
      "position": [
        -448,
        -416
      ],
      "id": "32eaa07e-3d1b-4798-bd3e-5f8ba8edfed8",
      "nodeNumber": 13
    },
    {
      "parameters": {
        "functionCode": "let raw = $json.response || '';\nif (!raw || raw.trim() === '') {\n  return [{ json: { post: 'Error: No content generated from Ollama. Check model and prompt.', model: $json.model || '', provider: 'Ollama', debug: 'Empty response from Ollama', requestData: JSON.stringify($input) } }];\n}\n\nraw = raw.replace(/^```\\w*\\s*\\n/, '').replace(/\\n\\s*```$/, '').trim();\n\nif (raw.startsWith('\"') && raw.endsWith('\"')) {\n  raw = raw.slice(1, -1);\n}\n\nraw = raw.replace(/<think>[\\s\\S]*?<\\/think>/gi, '').trim();\n\nfunction formatSocialPost(content) {\n  let formatted = content\n    .replace(/^标题[:：]\\s*/gm, 'Title: ')\n    .replace(/^钩子[:：]\\s*/gm, 'Hook: ')\n    .replace(/^CTA[:：]\\s*/gm, 'CTA: ')\n    .replace(/^正文[:：]\\s*/gm, 'Body: ')\n    .replace(/^内容[:：]\\s*/gm, 'Content: ')\n    .replace(/^文案[:：]\\s*/gm, 'Copy: ')\n    .replace(/^Call to Action[:：]\\s*/gmi, 'Call to Action: ')\n    .replace(/^行动号召[:：]\\s*/gm, 'Action Call: ')\n    .replace(/^\\[.*?\\]\\s*/gm, '')\n    .replace(/<think>[\\s\\S]*?<\\/think>/gi, '')\n    .replace(/##/g, '#');\n  \n  const lines = formatted.split('\\n');\n  const processedLines = [];\n  const allHashtags = [];\n  \n  for (let i = 0; i < lines.length; i++) {\n    const line = lines[i].trim();\n    if (!line) continue;\n    \n    // Handle double ## tag lines\n    if (line.match(/^##[\\w\\s#]+$/)) {\n      const cleanLine = line.replace(/##/g, '#');\n      allHashtags.push(cleanLine);\n    } else if (line.match(/^#[\\w\\s#]+$/)) {\n      allHashtags.push(line);\n    } else if (line.includes('#') && line.split('#').length > 2) {\n      const parts = line.split(/(?=#)/);\n      const textPart = parts[0].trim();\n      const hashtagPart = parts.slice(1).map(h => {\n        let tag = h.trim();\n        // Clean double # tags\n        if (tag.startsWith('#')) {\n          tag = tag.replace(/^#+/, '#');\n        } else {\n          tag = '#' + tag;\n        }\n        return tag;\n      }).join(' ');\n      \n      if (textPart) processedLines.push(textPart);\n      if (hashtagPart) allHashtags.push(hashtagPart);\n    } else {\n      processedLines.push(line);\n    }\n  }\n  \n  let result = processedLines.join('\\n');\n  \n  if (allHashtags.length > 0) {\n    // Clean double # tags in hashtags and merge all hashtags into one line\n    const cleanHashtags = allHashtags.map(tag => tag.replace(/#+/g, '#').trim()).filter(tag => tag.length > 0).join(' ');\n    // Only add separator when there is content to avoid empty lines\n    if (result.trim()) {\n      result += '\\n' + cleanHashtags;\n    } else {\n      result = cleanHashtags;\n    }\n  }\n  \n  return result.trim();\n}\n\nconst formattedPost = formatSocialPost(raw);\n\nreturn [{ json: { \n  post: formattedPost, \n  rawPost: raw,\n  model: $json.model || '', \n  provider: 'Ollama', \n  debug: 'Successfully parsed and formatted post' \n} }];"
      },
      "name": "13a-Parse Ollama Post",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -320,
        -416
      ],
      "id": "6d5537f0-977e-4d55-80ce-718c30e9dadf"
    },
    {
      "parameters": {
        "functionCode": "const mockPost = `🚀 AI Technology Reshaping Work Models\n\nFrom automating daily tasks to intelligent decision support, artificial intelligence is revolutionizing how we work. Traditional work patterns are being disrupted, with efficiency and innovation developing in parallel.\n\nModern enterprises increasingly rely on AI tools to enhance competitiveness, from data analysis to customer service, AI application scenarios continue to expand. This is not just technological progress, but a transformation in thinking.\n\nHave you already used AI tools in your work? Share your AI experience and let's explore more possibilities together!\n\n#AI #ArtificialIntelligence #Automation #Technology #Future #WorkMode`;\n\nreturn [{ json: { provider: 'OpenAI', post: mockPost, debug: 'Mock OpenAI response with proper formatting' } }];"
      },
      "name": "14-OpenAI Generate Post",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -416,
        -176
      ],
      "id": "046e409b-d6d1-4e32-bb52-57f824994912",
      "nodeNumber": 14
    },
    {
      "parameters": {
        "functionCode": "const mockPost = `💡 Exploring AI's Infinite Possibilities\n\nDeep learning and machine learning are reshaping the future of various industries. From precise medical diagnosis to intelligent financial analysis predictions, to unlimited creative design inspiration, AI technology is demonstrating its powerful transformative force.\n\nThis technological revolution not only changes how we work, but also redefines the collaborative relationship between humans and machines. We stand at the threshold of a new era, witnessing how intelligent technology reshapes the world.\n\nWhich field do you think AI will bring breakthrough progress to next? Welcome to share your insights and predictions in the comments!\n\n#DeepLearning #MachineLearning #AIInnovation #TechFrontier #FutureTrends`;\n\nreturn [{ json: { provider: 'Deepseek', post: mockPost, debug: 'Mock Deepseek response with proper formatting' } }];"
      },
      "name": "15-Deepseek Generate Post",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -336,
        48
      ],
      "id": "98cde6bd-bb5c-438d-b605-19599e379b54",
      "nodeNumber": 15
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "previewContent",
              "value": "={{ JSON.stringify($json) }}"
            }
          ]
        },
        "options": {}
      },
      "name": "16-Cache Preview",
      "type": "n8n-nodes-base.set",
      "typeVersion": 2,
      "position": [
        -224,
        -208
      ],
      "id": "78e85d37-b9c6-4b4a-be54-41f4dbe4a2f1",
      "nodeNumber": 16
    },
    {
      "parameters": {
        "options": {}
      },
      "name": "17-Return Preview",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        -96,
        -480
      ],
      "id": "b5b1e2f3-b0ae-419a-9ea7-27c0b7cdaaf6"
    },
    {
      "parameters": {
        "jsCode": "return [{\n json: {\n post: $json.body.post || $json.post || '',\n platforms: $json.body.platforms || $json.platforms || [],\n model: $json.body.model || $json.model || '',\n provider: $json.body.provider || $json.provider || 'Ollama',\n approvedAt: new Date().toISOString()\n }\n}];"
      },
      "name": "19-Parse Approval Input",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        -16,
        -48
      ],
      "id": "98519742-5fe8-4103-88ff-175f7d793995",
      "nodeNumber": 19
    },
    {
      "parameters": {
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "linkedInOAuth2Api",
        "url": "https://api.linkedin.com/v2/me",
        "options": {}
      },
      "name": "20a-Get LinkedIn User ID",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 2,
      "position": [
        480,
        -656
      ],
      "id": "f815d51d-b291-416b-92f8-b61bd0df3b6f",
      "credentials": {
        "linkedInOAuth2Api": {
          "id": "XcGpu0HUIYvAkc81",
          "name": "LinkedIn account"
        }
      }
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "authorURN",
              "value": "={{ 'urn:li:person:' + $json.id }}"
            }
          ]
        },
        "options": {}
      },
      "name": "20b-Set Author URN",
      "type": "n8n-nodes-base.set",
      "typeVersion": 2,
      "position": [
        704,
        -656
      ],
      "id": "060859e4-167b-4a45-85dc-c96e26b59003"
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.platforms }}",
              "operation": "contains",
              "value2": "LinkedIn"
            }
          ]
        }
      },
      "name": "21a-IF LinkedIn Selected",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        272,
        -400
      ],
      "id": "4878a115-4577-42e1-952c-4c3f7b016d70"
    },
    {
      "parameters": {
        "functionCode": "return [{ json: { platform: 'LinkedIn', status: 'Skipped' } }];"
      },
      "name": "21b-Skipped LinkedIn",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        784,
        -496
      ],
      "id": "ddf803d6-f782-46ee-a900-463e9cf31908"
    },
    {
      "parameters": {
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "linkedInOAuth2Api",
        "requestMethod": "POST",
        "url": "https://api.linkedin.com/v2/ugcPosts",
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "{\n  \"author\": \"{{ $json.authorURN }}\",\n  \"lifecycleState\": \"PUBLISHED\",\n  \"specificContent\": {\n    \"com.linkedin.ugc.ShareContent\": {\n      \"shareCommentary\": {\n        \"text\": \"{{ $json.post.replace(/\\n/g, '\\\\n') }}\"\n      },\n      \"shareMediaCategory\": \"NONE\"\n    }\n  },\n  \"visibility\": {\n    \"com.linkedin.ugc.MemberNetworkVisibility\": \"PUBLIC\"\n  }\n}"
      },
      "name": "21-Post to LinkedIn",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 2,
      "position": [
        944,
        -656
      ],
      "id": "b6fc0900-5ff0-4a56-9059-6be040527811",
      "nodeNumber": 21,
      "credentials": {
        "linkedInOAuth2Api": {
          "id": "XcGpu0HUIYvAkc81",
          "name": "LinkedIn account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "facebookGraphApi",
        "url": "https://graph.facebook.com/v20.0/me/accounts",
        "options": {}
      },
      "name": "22a-Get Facebook Pages",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 2,
      "position": [
        656,
        -320
      ],
      "id": "fb312986-f168-46ae-bd41-c3a3e62abe74",
      "credentials": {
        "facebookGraphApi": {
          "id": "Ql9rjIM3ehMvUHNY",
          "name": "Facebook Graph account"
        }
      }
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "facebookPageId",
              "value": "={{ $json.data && $json.data[0] ? $json.data[0].id : '' }}"
            },
            {
              "name": "facebookPageToken",
              "value": "={{ $json.data && $json.data[0] ? $json.data[0].access_token : '' }}"
            },
            {
              "name": "facebookResponse",
              "value": "={{ JSON.stringify($json) }}"
            },
            {
              "name": "platforms",
              "value": "={{ $node['20-Publish to Platform'].json.platforms }}"
            },
            {
              "name": "post",
              "value": "={{ $node['20-Publish to Platform'].json.post }}"
            },
            {
              "name": "tokenDebug",
              "value": "={{ $json.error ? 'Error: ' + $json.error.message + ' - Use USER token, not PAGE token!' : 'Success: Pages found' }}"
            }
          ]
        },
        "options": {}
      },
      "name": "22b-Set Facebook Page ID",
      "type": "n8n-nodes-base.set",
      "typeVersion": 2,
      "position": [
        816,
        -320
      ],
      "id": "4cd7cbe6-f7bb-49c3-a8ee-5daf16021d04"
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.platforms }}",
              "operation": "contains",
              "value2": "Facebook"
            }
          ]
        }
      },
      "name": "22c-IF Facebook Selected",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        384,
        -208
      ],
      "id": "7b15004b-cf5e-4686-a11a-a760437e335d"
    },
    {
      "parameters": {
        "functionCode": "return [{ json: { platform: 'Facebook', status: 'Skipped' } }];"
      },
      "name": "22d-Skipped Facebook",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        960,
        -192
      ],
      "id": "ba859d51-4498-4e61-84ee-978c3ca88346"
    },
    {
      "parameters": {
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "facebookGraphApi",
        "requestMethod": "POST",
        "url": "={{ $json.facebookPageId ? 'https://graph.facebook.com/v20.0/' + $json.facebookPageId + '/feed' : 'https://graph.facebook.com/v20.0/invalid/feed' }}",
        "options": {}
      },
      "name": "22-Post to Facebook",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 2,
      "position": [
        1072,
        -352
      ],
      "id": "6bda25fb-7d9b-4426-8924-1fb24e53acf8",
      "nodeNumber": 22,
      "credentials": {
        "facebookGraphApi": {
          "id": "Ql9rjIM3ehMvUHNY",
          "name": "Facebook Graph account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "facebookGraphApi",
        "url": "https://graph.facebook.com/v20.0/me/accounts?fields=instagram_business_account",
        "options": {}
      },
      "name": "23a-Get IG Account",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 2,
      "position": [
        640,
        -32
      ],
      "id": "0680b360-92a6-4722-b22c-6ea27896885a",
      "credentials": {
        "facebookGraphApi": {
          "id": "Ql9rjIM3ehMvUHNY",
          "name": "Facebook Graph account"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "// Extract Instagram Business Account ID with fallback\nlet igBusinessId = '17841469701122871'; // Hardcoded fallback\nlet facebookPageId = '';\nlet debugInfo = 'Using hardcoded Instagram Business Account ID';\n\n// Try to extract from API response\nif ($json.data && $json.data.length > 0) {\n  const pageData = $json.data[0];\n  facebookPageId = pageData.id || '';\n  \n  if (pageData.instagram_business_account && pageData.instagram_business_account.id) {\n    igBusinessId = pageData.instagram_business_account.id;\n    debugInfo = 'Successfully extracted Instagram Business Account ID from API';\n  } else {\n    debugInfo = 'API response missing instagram_business_account field, using hardcoded ID';\n  }\n} else {\n  debugInfo = 'No data in API response, using hardcoded Instagram Business Account ID';\n}\n\nreturn [{ \n  json: { \n    igBusinessId: igBusinessId,\n    facebookPageId: facebookPageId,\n    debugInfo: debugInfo,\n    platforms: $node['20-Publish to Platform'].json.platforms || [],\n    post: $node['20-Publish to Platform'].json.post || ''\n  } \n}];"
      },
      "name": "23b-Set IG ID",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        784,
        -32
      ],
      "id": "52f47e1c-7ea7-4541-a7cd-5cc7fa7c2a8e"
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.platforms }}",
              "operation": "contains",
              "value2": "Instagram"
            }
          ]
        }
      },
      "name": "23c-IF IG Selected",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        496,
        112
      ],
      "id": "c832df51-f007-4049-bbee-79a1990f4169"
    },
    {
      "parameters": {
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "facebookGraphApi",
        "requestMethod": "POST",
        "url": "={{ 'https://graph.facebook.com/v20.0/' + $json.igBusinessId + '/media' }}",
        "options": {}
      },
      "name": "23d-Create IG Container",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 2,
      "position": [
        960,
        -32
      ],
      "id": "2b8a7c79-9b27-4d9d-9718-801a18fd37c6",
      "credentials": {
        "facebookGraphApi": {
          "id": "Ql9rjIM3ehMvUHNY",
          "name": "Facebook Graph account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "facebookGraphApi",
        "requestMethod": "POST",
        "url": "={{ 'https://graph.facebook.com/v20.0/' + $json.igBusinessId + '/media_publish' }}",
        "options": {}
      },
      "name": "23e-Publish IG Post",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 2,
      "position": [
        1104,
        -32
      ],
      "id": "79e48dc9-4f2b-41ac-b356-13e91948d0ac",
      "credentials": {
        "facebookGraphApi": {
          "id": "Ql9rjIM3ehMvUHNY",
          "name": "Facebook Graph account"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "return [{ json: { platform: 'Instagram', status: 'Skipped' } }];"
      },
      "name": "23f-Skipped IG",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        864,
        176
      ],
      "id": "170dfbe0-70f7-41ee-869e-e7ac2108c9a7"
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.platforms }}",
              "operation": "contains",
              "value2": "X"
            }
          ]
        }
      },
      "name": "24a-IF X Selected",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        624,
        400
      ],
      "id": "df29928c-6e81-4ea7-aecf-ee45795d5196"
    },
    {
      "parameters": {
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "twitterOAuth1Api",
        "requestMethod": "POST",
        "url": "https://api.twitter.com/2/tweets",
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={{ JSON.stringify({ text: $json.post }) }}"
      },
      "name": "24-Post to X",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 2,
      "position": [
        896,
        336
      ],
      "id": "ebd723f1-8ac7-4e08-bea9-a24c3fb0f48a",
      "nodeNumber": 24,
      "credentials": {
        "twitterOAuth1Api": {
          "id": "r3GZ8gqhBdUPaEv5",
          "name": "X OAuth account"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "return [{ json: { platform: 'X', status: 'Skipped' } }];"
      },
      "name": "24b-Skipped X",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        912,
        512
      ],
      "id": "9c53d6e1-d4cb-4346-8218-33f965d10dc5"
    },
    {
      "parameters": {
        "mode": "wait"
      },
      "name": "25-Merge Publish Results",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 1,
      "position": [
        1600,
        -240
      ],
      "id": "4feaf729-a080-489c-8e6b-6f2baadbf424",
      "nodeNumber": 25
    },
    {
      "parameters": {
        "options": {}
      },
      "name": "26-Respond Approval Result",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1744,
        -240
      ],
      "id": "c80e9ecb-877a-4238-a740-904d921cfcce",
      "nodeNumber": 26
    },
    {
      "parameters": {
        "functionCode": "return [{ json: { ...$json, message: 'Post published to platforms' } }];\n"
      },
      "name": "20-Publish to Platform",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        160,
        -48
      ],
      "id": "84d80b0e-6524-498e-8e9a-5b66e9edf773",
      "nodeNumber": 20
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "approve-social-post",
        "responseMode": "responseNode",
        "options": {
          "rawBody": "={{ true }}"
        }
      },
      "name": "18-Wait Approval",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        80,
        -416
      ],
      "id": "adc2eb23-87c2-4280-a9df-8f676822bf94",
      "nodeNumber": 18,
      "webhookId": "ef897c96-4502-4c3f-ab63-1833cfef5253"
    },
    {
      "parameters": {
        "options": {}
      },
      "name": "18-Approval Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1920,
        -48
      ],
      "id": "f2d1ca90-8ffa-491d-996b-c246d56bd3ec"
    },
    {
      "parameters": {
        "httpMethod": "GET,POST",
        "path": "instagram-webhook",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "02586d81-56e8-4ef3-a48f-fc5d7330bed5",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -2304,
        480
      ],
      "webhookId": "instagram-webhook"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "fb8b42e5-4f57-4acc-a4de-d71c7bb83578",
              "leftValue": "={{ $json.query['hub.mode'] }}",
              "rightValue": "subscribe",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            },
            {
              "id": "f1e9e6b8-2a5c-4d3e-8f7b-1c9a8b7d6e5f",
              "leftValue": "={{ $json.query['hub.verify_token'] }}",
              "rightValue": "test12345",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combineOperation": "all"
        },
        "options": {}
      },
      "id": "10c43f22-2d84-4131-88d3-3915204bd654",
      "name": "Verification Check",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -2080,
        480
      ]
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "={{ $json.query['hub.challenge'] }}",
        "options": {}
      },
      "id": "45612c93-6d6c-4bf2-b711-7f2de704cdc2",
      "name": "Return Challenge",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        -1856,
        368
      ]
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "Invalid verification token",
        "options": {
          "responseCode": 403
        }
      },
      "id": "a4f571bd-fd01-41d8-876b-bff967588c13",
      "name": "Return Error",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        -1856,
        576
      ]
    },
    {
      "parameters": {
        "functionCode": "return Array.isArray($input) && $input.length > 0 ? $input : [{json:{}}];"
      },
      "name": "3a-Ensure Array (IF Manual Missing True)",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -2080,
        -112
      ],
      "id": "4b23eba9-b3a2-49a1-9578-2bd8459ab02e"
    },
    {
      "parameters": {
        "functionCode": "return Array.isArray($input) && $input.length > 0 ? $input : [{json:{}}];"
      },
      "name": "3b-Ensure Array (IF Manual Missing False)",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -2080,
        96
      ],
      "id": "410fd5cf-3096-4319-85bb-e04a568a16af"
    }
  ],
  "pinData": {},
  "connections": {
    "1-Webhook Entry": {
      "main": [
        [
          {
            "node": "2-Prepare Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "2-Prepare Content": {
      "main": [
        [
          {
            "node": "3-IF Manual Missing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "3-IF Manual Missing": {
      "main": [
        [
          {
            "node": "4-Code Fetch & Check HTML",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "5-Set Prompt (SEO)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "3a-Ensure Array (IF Manual Missing True)": {
      "main": [
        [
          {
            "node": "4-Code Fetch & Check HTML",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "3b-Ensure Array (IF Manual Missing False)": {
      "main": [
        [
          {
            "node": "5-Set Prompt (SEO)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "5-Set Prompt (SEO)": {
      "main": [
        [
          {
            "node": "6-Provider Switch (SEO)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "6-Provider Switch (SEO)": {
      "main": [
        [
          {
            "node": "7-Ollama Extract",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "8-OpenAI Extract",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "9-Deepseek Extract",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "7-Ollama Extract": {
      "main": [
        [
          {
            "node": "7a-Parse Ollama JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "8-OpenAI Extract": {
      "main": [
        [
          {
            "node": "8a-Parse OpenAI JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "9-Deepseek Extract": {
      "main": [
        [
          {
            "node": "9a-Parse Deepseek JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "11-Set Post Prompt": {
      "main": [
        [
          {
            "node": "12-Provider Switch (Post)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "10-Parse SEO JSON": {
      "main": [
        [
          {
            "node": "11-Set Post Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "7a-Parse Ollama JSON": {
      "main": [
        [
          {
            "node": "10-Parse SEO JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "8a-Parse OpenAI JSON": {
      "main": [
        [
          {
            "node": "10-Parse SEO JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "9a-Parse Deepseek JSON": {
      "main": [
        [
          {
            "node": "10-Parse SEO JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "12-Provider Switch (Post)": {
      "main": [
        [
          {
            "node": "13-Ollama Generate Post",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "14-OpenAI Generate Post",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "15-Deepseek Generate Post",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "14-OpenAI Generate Post": {
      "main": [
        [
          {
            "node": "16-Cache Preview",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "15-Deepseek Generate Post": {
      "main": [
        [
          {
            "node": "16-Cache Preview",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "13-Ollama Generate Post": {
      "main": [
        [
          {
            "node": "13a-Parse Ollama Post",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "13a-Parse Ollama Post": {
      "main": [
        [
          {
            "node": "16-Cache Preview",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "25-Merge Publish Results": {
      "main": [
        [
          {
            "node": "26-Respond Approval Result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "26-Respond Approval Result": {
      "main": [
        [
          {
            "node": "18-Approval Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "19-Parse Approval Input": {
      "main": [
        [
          {
            "node": "20-Publish to Platform",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "20a-Get LinkedIn User ID": {
      "main": [
        [
          {
            "node": "20b-Set Author URN",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "20b-Set Author URN": {
      "main": [
        [
          {
            "node": "21-Post to LinkedIn",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "20-Publish to Platform": {
      "main": [
        [
          {
            "node": "21a-IF LinkedIn Selected",
            "type": "main",
            "index": 0
          },
          {
            "node": "24a-IF X Selected",
            "type": "main",
            "index": 0
          },
          {
            "node": "22c-IF Facebook Selected",
            "type": "main",
            "index": 0
          },
          {
            "node": "23c-IF IG Selected",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "22a-Get Facebook Pages": {
      "main": [
        [
          {
            "node": "22b-Set Facebook Page ID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "22b-Set Facebook Page ID": {
      "main": [
        [
          {
            "node": "22-Post to Facebook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "22c-IF Facebook Selected": {
      "main": [
        [
          {
            "node": "22a-Get Facebook Pages",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "22d-Skipped Facebook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "22-Post to Facebook": {
      "main": [
        [
          {
            "node": "25-Merge Publish Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "22d-Skipped Facebook": {
      "main": [
        [
          {
            "node": "25-Merge Publish Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "21a-IF LinkedIn Selected": {
      "main": [
        [
          {
            "node": "20a-Get LinkedIn User ID",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "21b-Skipped LinkedIn",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "21-Post to LinkedIn": {
      "main": [
        [
          {
            "node": "25-Merge Publish Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "21b-Skipped LinkedIn": {
      "main": [
        [
          {
            "node": "25-Merge Publish Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "23a-Get IG Account": {
      "main": [
        [
          {
            "node": "23b-Set IG ID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "23b-Set IG ID": {
      "main": [
        [
          {
            "node": "23d-Create IG Container",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "23c-IF IG Selected": {
      "main": [
        [
          {
            "node": "23a-Get IG Account",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "23f-Skipped IG",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "23d-Create IG Container": {
      "main": [
        [
          {
            "node": "23e-Publish IG Post",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "23e-Publish IG Post": {
      "main": [
        [
          {
            "node": "25-Merge Publish Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "23f-Skipped IG": {
      "main": [
        [
          {
            "node": "25-Merge Publish Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "24a-IF X Selected": {
      "main": [
        [
          {
            "node": "24-Post to X",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "24b-Skipped X",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "24-Post to X": {
      "main": [
        [
          {
            "node": "25-Merge Publish Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "24b-Skipped X": {
      "main": [
        [
          {
            "node": "25-Merge Publish Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "18-Wait Approval": {
      "main": [
        [
          {
            "node": "19-Parse Approval Input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "16-Cache Preview": {
      "main": [
        [
          {
            "node": "17-Return Preview",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "4b-Get HTML via Puppeteer": {
      "main": [
        [
          {
            "node": "5-Set Prompt (SEO)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "4c-IF HTML Missing": {
      "main": [
        [
          {
            "node": "4b-Get HTML via Puppeteer",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "5-Set Prompt (SEO)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "4-Code Fetch & Check HTML": {
      "main": [
        [
          {
            "node": "4c-IF HTML Missing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Verification Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Verification Check": {
      "main": [
        [
          {
            "node": "Return Challenge",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Return Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "2f46e05b-2f31-4bc5-8ba1-dd29f8df9f03",
  "meta": {
    "instanceId": "5bd350cdf438b8337e86b6a07c0089dc12a2465558e0e77f5da8f5f877bf6079"
  },
  "id": "fO6IQjH3a8xUYjED",
  "tags": []
}